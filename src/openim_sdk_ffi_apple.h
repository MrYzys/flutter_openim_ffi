/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/openimsdk/openim-sdk-core/v3/main */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "conversation_msg.go"

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#line 1 "cgo-generated-wrapper"


#line 3 "friend.go"

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#line 1 "cgo-generated-wrapper"

#line 3 "group.go"

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#line 1 "cgo-generated-wrapper"

#line 3 "logs.go"

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#line 1 "cgo-generated-wrapper"

#line 3 "openim_sdk_ffi.go"

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "openim_sdk_ffi.h"


static void callOnMethodChannel(Openim_Listener listener, Dart_Port_DL port, char *message) {
    listener.onMethodChannel(port, message);
}



#line 1 "cgo-generated-wrapper"

#line 3 "third.go"

#include <stdio.h>
#include <stdint.h>

#line 1 "cgo-generated-wrapper"

#line 3 "user.go"

#include <stdio.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GetAllConversationList(char* operationID);
extern void GetConversationListSplit(char* operationID, int offset, int count);
extern void GetOneConversation(char* operationID, int32_t sessionType, char* sourceID);
extern void GetMultipleConversation(char* operationID, char* conversationIDList);
extern char* GetConversationIDBySessionType(char* operationID, char* sourceID, int sessionType);
extern void GetTotalUnreadMsgCount(char* operationID);
extern void MarkConversationMessageAsRead(char* operationID, char* conversationID);
extern void MarkAllConversationMessageAsRead(char* operationID);
extern void SetConversation(char* operationID, char* conversationID, char* draftText);
extern void SetConversationDraft(char* operationID, char* conversationID, char* draftText);
extern void HideConversation(char* operationID, char* conversationID);
extern void ChangeInputStates(char* operationID, char* conversationID, _Bool focus);
extern void HideAllConversations(char* operationID);
extern void ClearConversationAndDeleteAllMsg(char* operationID, char* conversationID);
extern void GetInputStates(char* operationID, char* conversationID, char* userID);
extern void DeleteConversationAndDeleteAllMsg(char* operationID, char* conversationID);
extern char* CreateTextMessage(char* operationID, char* text);
extern char* CreateTextAtMessage(char* operationID, char* text, char* atUserList, char* atUsersInfo, char* message);
extern char* CreateImageMessageFromFullPath(char* operationID, char* imageFullPath);
extern char* CreateImageMessageByURL(char* operationID, char* sourcePath, char* sourcePicture, char* bigPicture, char* snapshotPicture);
extern char* CreateForwardMessage(char* operationID, char* m);
extern char* CreateLocationMessage(char* operationID, char* description, double longitude, double latitude);
extern char* CreateQuoteMessage(char* operationID, char* text, char* message);
extern char* CreateCardMessage(char* operationID, char* cardInfo);
extern char* CreateCustomMessage(char* operationID, char* data, char* extension, char* description);
extern void SendMessage(char* operationID, char* message, char* recvID, char* groupID, char* offlinePushInfo);
extern void SendMessageNotOss(char* operationID, char* message, char* recvID, char* groupID, char* offlinePushInfo);
extern void TypingStatusUpdate(char* operationID, char* recvID, char* msgTip);
extern void RevokeMessage(char* operationID, char* conversationID, char* clientMsgID);
extern void DeleteMessage(char* operationID, char* conversationID, char* clientMsgID);
extern void DeleteMessageFromLocalStorage(char* operationID, char* conversationID, char* clientMsgID);
extern void DeleteAllMsgFromLocal(char* operationID);
extern void DeleteAllMsgFromLocalAndSvr(char* operationID);
extern void SearchLocalMessages(char* operationID, char* searchParam);
extern void GetAdvancedHistoryMessageList(char* operationID, char* getMessageOptions);
extern void GetAdvancedHistoryMessageListReverse(char* operationID, char* getMessageOptions);
extern void FindMessageList(char* operationID, char* findMessageOptions);
extern void InsertGroupMessageToLocalStorage(char* operationID, char* message, char* groupID, char* sendID);
extern void InsertSingleMessageToLocalStorage(char* operationID, char* message, char* recvID, char* sendID);
extern void SearchConversation(char* operationID, char* searchParam);
extern void SetMessageLocalEx(char* operationID, char* conversationID, char* clientMsgID, char* localEx);
extern char* GetAtAllTag(char* operationID);
extern char* CreateAdvancedTextMessage(char* operationID, char* text, char* messageEntityList);
extern char* CreateAdvancedQuoteMessage(char* operationID, char* text, char* message, char* messageEntityList);
extern char* CreateImageMessage(char* operationID, char* imagePath);
extern char* CreateSoundMessage(char* operationID, char* soundPath, int64_t duration);
extern char* CreateSoundMessageByURL(char* operationID, char* soundBaseInfo);
extern char* CreateVideoMessage(char* operationID, char* videoPath, char* videoType, int64_t duration, char* snapshotPath);
extern char* CreateVideoMessageByURL(char* operationID, char* videoBaseInfo);
extern char* CreateFileMessage(char* operationID, char* filePath, char* fileName);
extern char* CreateMergerMessage(char* operationID, char* messageList, char* title, char* summaryList);
extern char* CreateFaceMessage(char* operationID, int index, char* data);
extern void MarkMessagesAsReadByMsgID(char* operationID, char* conversationID, char* clientMsgIDs);
extern char* CreateFileMessageByURL(char* operationID, char* fileBaseInfo);
extern char* CreateFileMessageFromFullPath(char* operationID, char* fileFullPath, char* fileName);
extern char* CreateSoundMessageFromFullPath(char* operationID, char* soundFullPath, int64_t duration);
extern char* CreateVideoMessageFromFullPath(char* operationID, char* videoFullPath, char* videoType, int64_t duration, char* snapshotFullPath);
extern void UploadFile(char* operationID, char* req, char* uuid);
extern void AcceptFriendApplication(char* operationID, char* userIDHandleMsg);
extern void AddBlack(char* operationID, char* blackUserID, char* ex);
extern void AddFriend(char* operationID, char* userIDReqMsg);
extern void CheckFriend(char* operationID, char* userIDList);
extern void DeleteFriend(char* operationID, char* friendUserID);
extern void GetBlackList(char* operationID);
extern void GetFriendApplicationListAsApplicant(char* operationID, char* req);
extern void GetFriendApplicationListAsRecipient(char* operationID, char* req);
extern void GetFriendList(char* operationID, _Bool filterBlack);
extern void GetFriendListPage(char* operationID, int32_t offset, int32_t count, _Bool filterBlack);
extern void GetSpecifiedFriendsInfo(char* operationID, char* userIDList, _Bool filterBlack);
extern void RefuseFriendApplication(char* operationID, char* userIDHandleMsg);
extern void RemoveBlack(char* operationID, char* removeUserID);
extern void SearchFriends(char* operationID, char* searchParam);
extern void UpdateFriends(char* operationID, char* req);
extern void CreateGroup(char* operationID, char* groupReqInfo);
extern void JoinGroup(char* operationID, char* groupID, char* reqMsg, int32_t joinSource, char* ex);
extern void InviteUserToGroup(char* operationID, char* groupID, char* reason, char* userIDList);
extern void GetJoinedGroupList(char* operationID);
extern void getJoinedGroupListPage(char* operationID, int32_t offset, int32_t count);
extern void SearchGroups(char* operationID, char* searchParam);
extern void GetSpecifiedGroupsInfo(char* operationID, char* groupIDList);
extern void SetGroupInfo(char* operationID, char* groupInfo);
extern void GetGroupApplicationListAsRecipient(char* operationID, char* req);
extern void GetGroupApplicationListAsApplicant(char* operationID, char* req);
extern void AcceptGroupApplication(char* operationID, char* groupID, char* fromUserID, char* handleMsg);
extern void RefuseGroupApplication(char* operationID, char* groupID, char* fromUserID, char* handleMsg);
extern void GetGroupMemberList(char* operationID, char* groupID, int32_t filter, int32_t offset, int32_t count);
extern void GetSpecifiedGroupMembersInfo(char* operationID, char* groupID, char* userIDList);
extern void SearchGroupMembers(char* operationID, char* searchParam);
extern void SetGroupMemberInfo(char* operationID, char* groupMemberInfo);
extern void GetGroupMemberOwnerAndAdmin(char* operationID, char* groupID);
extern void GetGroupMemberListByJoinTimeFilter(char* operationID, char* groupID, int32_t offset, int32_t count, int64_t joinTimeBegin, int64_t joinTimeEnd, char* filterUserIDList);
extern void KickGroupMember(char* operationID, char* groupID, char* reason, char* userIDList);
extern void ChangeGroupMemberMute(char* operationID, char* groupID, char* userID, int mutedSeconds);
extern void ChangeGroupMute(char* operationID, char* groupID, _Bool isMute);
extern void TransferGroupOwner(char* operationID, char* groupID, char* newOwnerUserID);
extern void DismissGroup(char* operationID, char* groupID);
extern void GetUsersInGroup(char* operationID, char* groupID, char* userIDList);
extern void IsJoinGroup(char* operationID, char* groupID);
extern void QuitGroup(char* operationID, char* groupID);
extern void UploadLogs(char* operationID, int line, char* ex, char* uuid);
extern void Logs(char* operationID, int logLevel, char* file, int line, char* msgs, char* err, char* keyAndValue);
extern char* GetSdkVersion();
extern _Bool InitSDK(Openim_Listener imListener, Dart_Port_DL port, char* operationID, char* config);
extern void Login(char* operationID, char* userID, char* token);
extern void Logout(char* operationID);
extern void SetAppBackgroundStatus(char* operationID, _Bool isBackground);
extern void NetworkStatusChanged(char* operationID);
extern int GetLoginStatus(char* operationID);
extern char* GetLoginUserID();
extern void UpdateFcmToken(char* operationID, char* fcmToken, int64_t expireTime);
extern void SetAppBadge(char* operationID, int32_t appUnreadCount);
extern void GetUsersInfo(char* operationID, char* userIDList);
extern void GetUsersInfoFromSrv(char* operationID, char* userIDList);
extern void SetSelfInfo(char* operationID, char* userInfo);
extern void GetSelfUserInfo(char* operationID);
extern void SubscribeUsersStatus(char* operationID, char* userIDs);
extern void UnsubscribeUsersStatus(char* operationID, char* userIDs);
extern void GetSubscribeUsersStatus(char* operationID);

#ifdef __cplusplus
}
#endif
